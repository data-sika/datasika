name: airbnb-baby-proj
schedule:
  # every month's first day
  - cron: "0 0 1 * *"

pipeline:
  stages:
    - id: airbnb_stage
      description: "stages for airbnb data"
      tasks:
        # id: <verb>
        # user_input:
        #   fields:
        #     - name: <what you will get back after the syntax> <noun>
        - id: webscrap_airbnb
          description: "get airbnb website page url"
          type: read
          function: http-request
          inputs:
            user_input:
              file_name: 'input.csv'
              file_format: csv
              # value: 'http://insideairbnb.com/get-the-data.html' (inside the csv file)
        - id: extract_table_content
          description: "get table content by xpath syntax"
          type: filter
          function: xpath
          inputs:
            user_input:
              field: '//table[@class="table table-hover table-striped tokyo"]//tr'
            task_inputs:
              - from: webscrap_airbnb
        - id: extract_row_content
          description: "get row content by column names & xpath syntax"
          type: filter
          function: xpath
          # use for loop to do things for each element(row)
          inputs:
            user_input:
              fields:
                - name: time
                  value: './/td[1]/text()'
                - name: description
                  value: './/td[4]/text()'
                - name: file_link
                  value: './/td[3]//a/@href'
            task_inputs:
              - from: extract_table_content
        - id: filter_date
          description: "get date-filtered data by sql syntax"
          type: filter
          function: sql
          inputs:
            user_input:
              field: "
                    SELECT `time`, `description`, `file_link`
                    FROM extract_row_content 
                    WHERE time = '28 December, 2021'
                  "
            task_inputs:
              - from: extract_row_content
        - id: get_listing_file_link
          description: "get file link by sql syntax"
          type: filter
          function: sql
          inputs:
            user_input:
              field: "
                    SELECT `file_link`
                    FROM filter_date
                    WHERE description
                    LIKE '%listings data%'
                  "
            task_inputs:
              - from: filter_date
        - id: request_listing_file
          description: "request file link"
          type: read
          function: http-request
          inputs:
            task_inputs:
              - extract_field: file_link
                from: get_listing_file_link
        # HOOK
        - id: decompress_file_str
          description: "decompress file str"
          type: transform
          function: decompress
          inputs:
            task_inputs:
              - from: request_listing_file
        - id: read_csv_str_to_table
          description: "read csv str to dataframe"
          type: transform
          function: transform-to-dataframe
          inputs:
            task_inputs:
              - str_type: csv
                from: decompress_file_str
        - id: filter_transform_listing
          description: "filter & transform fields by sql syntax"
          type: filter
          function: sql
          inputs:
            user_input:
              field: "
                    SELECT
                        `id`, `listing_url`, `name`, `latitude`, `longitude`, `price`, `number_of_reviews`, 
                        `review_scores_rating`, `review_scores_accuracy`, `review_scores_cleanliness`, 
                        `review_scores_checkin`, `review_scores_communication`, `review_scores_location`,
                        `review_scores_value`,  (30-availability_30) as unavailability_30, 1 as key
                    FROM read_csv_str_to_table
                    WHERE has_availability = 't' 
                       AND ((90-availability_90) != 90 OR (365-availability_365) != 365)
                    "
            task_inputs:
              - from: read_csv_str_to_table
    - id: covid19_stage
      tasks:
        - id: request_covid_api
          description: "get covid api url"
          type: read
          function: http-request
          inputs:
            # this use different user input type then the first task of webscrapping task 
            user_input:
              file_name: 'input2.csv'
              file_format: csv
              # value: "https://covid19-japan-web-api.vercel.app/api/v1/total?history=true"
        # HOOK
        - id: transform_json_to_dataframe
          description: "turn json to dataframe"
          type: transform
          function: transform-to-dataframe
          inputs:
            task_inputs:
              - str_type: json
                from: request_covid_api
        - id: calculate_covid_cases
          description: "calculate positive cases & deaths by sql, also add a key for outer join"
          type: filter
          function: sql
          inputs:
            user_input:
              field: "
                    SELECT  (max(positive) - min(positive)) as positive, (max(death) - min(death)) as death, 1 as key
                    FROM transform_json_to_dataframe
                    WHERE date = '20211128' OR date = '20211228'
                  "
            task_inputs:
              - from: transform_json_to_dataframe
    - id: merged_stage
      from:
          - airbnb_stage
          - covid_stage 
      tasks:
        - id: combine_airbnb_covid_data
          description: "combined two data sources into a big dataframe"
          type: merge
          function: sql
          inputs:
            user_input:
              field: "
                    SELECT
                      `id`, `listing_url`, `name`, `latitude`, `longitude`, `price`, `number_of_reviews`, 
                      `review_scores_rating`, `review_scores_accuracy`, `review_scores_cleanliness`, 
                      `review_scores_checkin`, `review_scores_communication`, `review_scores_location`, `review_scores_value`,
                      calculate_covid_cases.positive as jp_covid30_cases,  calculate_covid_cases.death as jp_covid30_deaths, `unavailability_30`
                    FROM filter_transform_listing
                    LEFT OUTER JOIN  calculate_covid_cases
                      ON filter_transform_listing.key = calculate_covid_cases.key
                  "
            task_inputs:
              - from: filter_transform_listing
              - from: calculate_covid_cases
        - id: transform_price
          description: "transform price"
          type: filter
          function: sql
          inputs:
            user_input:
              field: "
                    SELECT `unavailability_30`, `latitude`, `longitude`,
                      CAST(REPLACE(REPLACE(REPLACE(price, '$', ''), '.00', ''), ',' ,'') AS INT) as price,
                      `number_of_reviews`, `review_scores_rating`, `review_scores_accuracy`, `review_scores_cleanliness`, 
                      `review_scores_checkin`, `review_scores_communication`, `review_scores_location`,
                      `review_scores_value`, `jp_covid30_cases`, `jp_covid30_deaths`
                    FROM combine_airbnb_covid_data
                  "
            task_inputs:
              - from: combine_airbnb_covid_data
        - id: filter_nan_rows
          name: "filter NaN rows"
          type: filter
          function: sql
          inputs:
            user_input:
              field: "
                    SELECT *
                    FROM transform_price
                    WHERE `unavailability_30` IS NOT NULL AND `latitude` IS NOT NULL AND `longitude` IS NOT NULL AND
                      `number_of_reviews` IS NOT NULL AND `review_scores_rating` IS NOT NULL AND `review_scores_accuracy` IS NOT NULL AND 
                      `review_scores_cleanliness` IS NOT NULL AND `review_scores_checkin` IS NOT NULL AND `review_scores_communication` IS NOT NULL AND 
                      `review_scores_location` IS NOT NULL AND `review_scores_value` IS NOT NULL AND  `jp_covid30_cases` IS NOT NULL AND `jp_covid30_deaths` IS NOT NULL AND
                      `price` IS NOT NULL;
                  "
            task_inputs:
              - from: transform_price






          




